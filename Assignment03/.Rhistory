foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
makeCacheMatrix(foo)
cacheSolve(foo)
?getmtric
?getmtrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$getmatrix()
m <- matrix(data, ...)
x$setmatrix(m)
m
}
source('~/.active-rstudio-document', echo=TRUE)
cacheSolve(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
poo <- makeCacheMatrix(foo)
poo
cacheSolve(poo)
cacheSolve(poo)
goo <- cahceSolve(poo)
goo <- cacheSolve(poo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
View(foo)
poo <- makeCacheMatrix(foo)
foo <- matrix(1:10000)
poo <- makeCacheMatrix(foo)
cacheSolve(poo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
foo <- matrix(1:10000)
mat <- makeCacheMatrix
mat <- makeCacheMatrix(foo)
cacheSolve(mat)
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
mat <- makeCacheMatrix(foo)
cacheSolve(mat)
cacheSolve(mat)
rm(foo,mat)
foo <- matrix(c(1:10,11:20))
foo
foo <- matrix(c(rnorm(9)),nrow = 3, ncol = 3, byrow = T)
foo
mat <- makeCacheMatrix(foo)
cacheSolve(mat)
cacheSolve(mat)
solve(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
?str
setwd('~/datasciencecoursera/')  data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd('~/datasciencecoursera/')  data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd('~/datasciencecoursera/')  data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
best("CA","heart attack")
getwd()
source('~/datasciencecoursera/best.R', echo=TRUE)
best("CA","heart attack")
source('~/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("TX","heart failure", 4)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateIndex <- grep("TX", data[,7])
if(length(stateIndex) == 0) {    stop('invalid state')  }
length(stateIndex)
length(stateIndex) == 0
if(length(stateIndex) == 0) {    stop('invalid state')  }
if(length(stateIndex) == 0) {
stop('invalid state')
}
outcome <- "pneumonia"
if(length(grep(outcome, "heart attack")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,11]))  }
if(length(grep(outcome, "heart attack")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,11]))
}
if(length(grep(outcome, "heart failure")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,17]))
}
if(length(grep(outcome, "pneumonia")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,23]))
}
if(length(outcomeIndex) == 0) {
stop('invalid outcome')
}
rates <- outcomeIndex[stateIndex]
hosp <- data[stateIndex,2]
hosp
foo <- order(rates,hosp)
alldat <- data.frame(hosp[foo], rates[foo])
rankings <- alldat[complete.cases(alldat),]
numhosp <- dim(rankings)[1]
numhosp <- c(1:numhosp)
rankings["rank"] <- numhosp
colnames(rankings) <- c("HospitalName","Rate","Rank")
View(rankings)
num <- 4
if(num == "best") {    bestHosp <- rankings$HospitalName[1]    bestHosp  }
source('~/datasciencecoursera/rankhospital.R')
if(num == "best") {
bestHosp <- rankings$HospitalName[1]
bestHosp
}
if(num == "worst") {
bestHosp <-rankings$HospitalName[dim(rankings)[1]]
bestHosp
}
if(num > max(numhosp)) {
return('NA')
}
if(is.element(num,rankings$Rank)) {
# match rank to num
bestHosp <- rankings$hospitalName[num]
bestHosp
}
rankings$Rank
is.element(num,rankings$Rank)
bestHosp <- rankings$hospitalName[num]
rankings$hospitalName[num]
rankings$hospitalName[4]
rankings$hospitalName
rankings$HospitalName
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
rankhospital("MD", "heart attack","worst")
rankhospital("MD", "heart attack","best")
?dim
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateIndex <- grep("TX", data[,7])
stateIndex <- grep("MD", data[,7])
outcome <- "heart attack"
if(length(stateIndex) == 0) {    stop('invalid state')  }     # depending on the outcome, find outcome data column  if(length(grep(outcome, "heart attack")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,11]))  }  if(length(grep(outcome, "heart failure")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,17]))  }  if(length(grep(outcome, "pneumonia")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,23]))  }
if(length(stateIndex) == 0) {
stop('invalid state')
}
# depending on the outcome, find outcome data column
if(length(grep(outcome, "heart attack")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,11]))
}
if(length(grep(outcome, "heart failure")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,17]))
}
if(length(grep(outcome, "pneumonia")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,23]))
}
if(length(outcomeIndex) == 0) {
stop('invalid outcome')
}
rates <- outcomeIndex[stateIndex] # all mortality rates in state
hosp <- data[stateIndex,2] # all hospitals in state
foo <- order(rates,hosp)
alldat <- data.frame(hosp[foo], rates[foo])
rankings <- alldat[complete.cases(alldat),]
numhosp <- dim(rankings)[1] # how many hospitals?
numhosp <- c(1:numhosp) # create ranks of hospitals
rankings["rank"] <- numhosp # add rank to data frame
colnames(rankings) <- c("HospitalName","Rate","Rank")
num <- "worst"
if(num == "best") {
bestHosp <- rankings$HospitalName[1]
bestHosp
}
if(num == "worst") {
bestHosp <-rankings$HospitalName[dim(rankings)[1]]
bestHosp
}
if(num > max(numhosp)) {
return('NA')
}
if(num > max(numhosp)) {
return('NA')
}
?is.numeric
source('~/datasciencecoursera/rankhospital.R')
if(is.numeric(num)) {
if(num > max(numhosp)) {
return('NA')
} else {
if(is.element(num,rankings$Rank)) {
# match rank to num
bestHosp <- rankings$HospitalName[num]
bestHosp
}
}
}
source('~/datasciencecoursera/rankhospital.R')
rankhospital("MD", "heart attack","worst")
source('~/datasciencecoursera/rankhospital.R', echo=TRUE)
rankhospital("MD", "heart attack","worst")
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
rankhospital("MD", "heart attack","worst")
?display
?print
?return
rankhospital("MN", "heart attack",5000)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("MN", "heart attack",5000)
rankhospital("MD", "heart attack","worst")
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
?levels
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("MD", "heart attack","worst")
rankhospital("MD", "heart attack","best")
rankhospital("TX","heart failure", 2)
rankhospital("TX","heart failure", 2000)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("MD", "heart attack","worst")
rankhospital("MD", "heart attack","best")
source('~/datasciencecoursera/rankhospital.R')
rankhospital("MD", "heart attack","best")
rankhospital("MD", "heart attack","worst")
source('~/datasciencecoursera/rankhospital.R')
rankhospital("MD", "heart attack","worst")
rankhospital("TX","heart failure", 4)
rankhospital("MN", "heart attack",5000)
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/rankall.R')
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
stateIndex <- grep("MD", data[,7])
if(length(stateIndex) == 0) {
stop('invalid state')
}
if(length(grep(outcome, "heart attack")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,11]))
}
if(length(grep(outcome, "heart failure")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,17]))
}
if(length(grep(outcome, "pneumonia")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,23]))
}
## Check that outcome is valid
if(length(outcomeIndex) == 0) {
stop('invalid outcome')
}
outcome <- "heart attack"
if(length(grep(outcome, "heart attack")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,11]))
}
if(length(grep(outcome, "heart failure")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,17]))
}
if(length(grep(outcome, "pneumonia")) == 1) {
outcomeIndex <- suppressWarnings(as.numeric(data[,23]))
}
## Check that outcome is valid
if(length(outcomeIndex) == 0) {
stop('invalid outcome')
}
View(data)
stateData <- data[,7]
stateData <- as.list(data[,7])
View(stateData)
stateData <- data[,7]
is.element("AL",stateData)
source('~/datasciencecoursera/rankhospital.R')
outcomes <- c("heart attack","heart failure","pneumonia")
outcome <- "heart atack"
if(is.element(outcome,outcomes) == FALSE) {
stop('invalid outcome')
}
outcome <- "heart attack"
if(is.element(outcome,outcomes) == FALSE) {
stop('invalid outcome')
}
outcome == "heart attack"
# depending on the outcome, find outcome data column  if(length(grep(outcome, "heart attack")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,11]))  }  if(length(grep(outcome, "heart failure")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,17]))  }  if(length(grep(outcome, "pneumonia")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,23]))  }
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankall.R')
if(length(grep(outcome, "heart attack")) == 1) {
outcomeDat <- suppressWarnings(as.numeric(data[,11]))
}
if(length(grep(outcome, "heart failure")) == 1) {
outcomeDat <- suppressWarnings(as.numeric(data[,17]))
}
if(length(grep(outcome, "pneumonia")) == 1) {
outcomeDat <- suppressWarnings(as.numeric(data[,23]))
}
foo <-order(outcomeDat)
?suppressWarnings
?as.numeric
outcomeDat <- data.frame(c(data[,2],as.numeric(data[,11])))
View(outcomeDat)
outcomeDat <- data.frame(data[,2],as.numeric(data[,11]))
outcomeDat <- data.frame(data[,2],data[,11])
View(outcomeDat)
source('~/datasciencecoursera/rankall.R')
source('~/datasciencecoursera/rankall.R')
foo <-order(outcomeDat)
View(foo)
?order
outcomeDat <- suppressWarnings(as.numeric(data[,11]))
foo <-order(outcomeDat)
dat <- data.frame(outcomeDat[foo],data[foo,2])
View(dat)
data(mtcars)
data <- x$getmatrix()
View(mtcars)
apply(mtcars, 2, mean)
View(mtcars)
?apply
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?tapply
outcomeDat <- data.frame(data[,2], data[,7], data[,11])
View(outcomeDat)
colnames(outcomeDat) <- c("hospital","state","rate")
View(outcomeDat)
foo <- tapply(outcomeDat$hospital,outcomeDat$rate,order)
View(foo)
foo<- outcomeDat[complete.cases(outcomeDat)]
foo<- outcomeDat[complete.cases(outcomeDat),]
View(foo)
rm(dat,foo,mtcasr)
rm(dat,foo,mtcars)
View(outcomeDat)
data(irs)
data(iris)
View(iris)
foo <- tapply(outcomeDat$hospital,outcomeDat$rate,order)
foo <- tapply(outcomeDat$hospital,outcomeDat$state,order)
View(foo)
?list
?grep
grep("CA",foo)
grep("CA",foo[,1])
grep("CA",foo$row.names)
grep(CA,foo$row.names)
grep("CA",foo$row.names)
grep("CA",foo$rownames)
grep("CA",foo[,])
grep("CA",foo[,1])
?tapply
table(foo)
foo$row.names
foo
foo$CA
poo <- outcomeDat(foo$CA)
foo$MO
poo <- tapply(outcomeDat,outcomeDat$state,order)
poo <- tapply(outcomeDat$rate,outcomeDat$state,order)
poo
View(poo)
foo <- tapply(outcomeDat$rate,outcomeDat$state,order)
foo$AK
view(fop)
view(foo)
View(foo)
?tapply
foo <- tapply(outcomeDat$rate,outcomeDat$state)
View(foo)
range(foo)
stateIndex <- tapply(outcomeDat$rate,outcomeDat$state)
range(stateIndex)
foo <- tapply(outcomeDat$rate,outcomeDat$state,order)
View(foo)
Foo$2
foo$2
foo$CA
grep(stateData,StataIndex)
grep(stateData,StateIndex)
poo <- table(stateData,StataIndex)
?attach
outcomeDat <- data[!is.na(data[11]),]
View(outcomeDat)
outcomeDat <- as.numeric(outcomeDat[,11])
View(outcomeDat)
?!is.na
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
if (rankArea == "heart attack") {
outcome <- outcome[!is.na(outcome[11]),]
outcome[,11] <- as.numeric(outcome[,11])
attach(outcome)
result <- outcome[order(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, Hospital.Name), ]
View(data)
View(data)
}
outcomeDat <- outcomeDat[!is.na(data[11]),]
outcomeDat[,11] <- as.numeric(data[,11])
rm(outcomeDat)
outcomeDat <- outcomeDat[!is.na(data[11]),]
outcomeDat <- data[!is.na(data[11]),]
View(outcomeDat)
outcomeDat[,11] <- as.numeric(data[,11])
attach(data)
result <- outcomeDat[order(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, Hospital.Name), ]
View(result)
data <- read.csv("outcome-of-care-measures.csv",
colClasses="character", na.strings="Not Available")
source('~/datasciencecoursera/ProgrammingAssignment2/rankAll.R')
head(rankall("heart attack", 20), 10)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses="character", na.strings="Not Available")
HEART_ATTACK <- 11
HEART_FAILURE <- 17
PNEUMONIA <- 23
HOSPITAL_NAME <- 2
STATE <- 7
outcome_param <- "heart attack"
if (outcome_param == "heart attack") {
col = HEART_ATTACK
}
rank <- function(group) {
group[1]
}
tapply(outcome, outcome$State, rank)
group[1]
source('~/datasciencecoursera/ProgrammingAssignment2/rankAll.R')
source('~/datasciencecoursera/ProgrammingAssignment2/rankAll.R')
rankhospital("TX","heart failure", 4)
rankall("heart attack", 20)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
source('~/datasciencecoursera/ProgrammingAssignment2/rankAll.R')
source('~/datasciencecoursera/rankall.R')
source('~/datasciencecoursera/rankall.R')
data <- read.csv("outcome-of-care-data.csv", colClasses = "character",
na.strings="Not Available")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings="Not Available")
validOutcomes = c("heart attack", "heart failure", "pneumonia")
outcome <- "heart attack"
if(!is.element(outcome, validOutcomes)) { #
stop("invalid outcome")
#match outcome with data column
} else if (outcome == "heart attack") {
col = 11
} else if (outcome == "heart failure") {
col = 17
} else {
col = 23
}
data[, col] <- as.numeric(data[, col]) # force the needed column to numeric
allStates <- unique(data[,7]) # create list of all states
allStates <- sort(allStates) # sort alphabetically
df <- data.frame(hospital=character(), state=character())
View(allStates)
stateData <- data[data$State == state,][c(2,col)]
View(data)
source('~/datasciencecoursera/rankall.R')
rankall("heart attack", 20)
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/rankall.R')
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
source('~/datasciencecoursera/rankall.R')
source('~/datasciencecoursera/rankall.R')
tail(rankall("heart failure"), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/datasciencecoursera/rankall.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/rankall.R')
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankhospital.R')
tail(rankall("heart failure"), 10)
best("NY", "hert attack")
best("MD", "pneumonia")
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/datasciencecoursera/rankhospital.R')
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
setwd('~/datasciencecoursera/Assignment03')
submit()
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
source("best.R")
setwd("~/datasciencecoursera/Assignment03")
source("best.R")
best("TX", "heart attack")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()

View(foo)
View(foo)
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
makeCacheMatrix(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
makeCacheMatrix(foo)
cacheSolve(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
poo <- makeCacheMatrix(foo)
cacheSolve(poo)
mean(foo)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = rand(1000)
x = rnorm(1000)
rm(x)
goo = rnorm(1000)
makeVector(goo)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
loo <- makevector(goo)
loo <- makeVector(goo)
cachemean(loo)
mean(goo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(foo)
?setinverse
?setmatrix
m=NULL
setmatrix <- function(matrix) m <<- matrix
setmatrix <- function(matrix) m <<- matrix
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(foo)
?solve
?inv
??inv
?solve
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
makeCacheMatrix(foo)
m
solve(foo)
poo<-solve(foo)
foo%*%poo
View(foo)
View(foo)
View(poo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
rm(m, poo)
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
makeCacheMatrix(foo)
cacheSolve(foo)
?getmtric
?getmtrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$getmatrix()
m <- matrix(data, ...)
x$setmatrix(m)
m
}
source('~/.active-rstudio-document', echo=TRUE)
cacheSolve(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
poo <- makeCacheMatrix(foo)
poo
cacheSolve(poo)
cacheSolve(poo)
goo <- cahceSolve(poo)
goo <- cacheSolve(poo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
View(foo)
poo <- makeCacheMatrix(foo)
foo <- matrix(1:10000)
poo <- makeCacheMatrix(foo)
cacheSolve(poo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
foo <- matrix(1:10000)
mat <- makeCacheMatrix
mat <- makeCacheMatrix(foo)
cacheSolve(mat)
foo <- matrix(c(rnorm(10000)),nrow = 100, ncol = 100, byrow = T)
mat <- makeCacheMatrix(foo)
cacheSolve(mat)
cacheSolve(mat)
rm(foo,mat)
foo <- matrix(c(1:10,11:20))
foo
foo <- matrix(c(rnorm(9)),nrow = 3, ncol = 3, byrow = T)
foo
mat <- makeCacheMatrix(foo)
cacheSolve(mat)
cacheSolve(mat)
solve(foo)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
set.seed(1)
rpois(5, 2)
?rnorm
?pois
?ppois
x <- rnorm(10)
ppois(10,1)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
set.seed(10)
x <- rbinom(100, 10, 0.5)
e <- rnorm(100, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?binom
?rbinom
x
?rbinom
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
e
set.seed(1)
rpois(5, 2)
?set.seed
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")head(outcome)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
getwd()
setwd('~/datasciencecoursera/')
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ncol(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
locale <- outcome[,7]
state <- outcome[,7]
foo <- grep("AL", outcome[,7])
foo
foo <- grep("AP", outcome[,7])
?is.empty
?empty
length(foo)
outcomeIndex <- grep("heart attack", outcome[,c(11,17,23)])
foo <- outcome[,c(11,17,23)]
View(foo)
outcomeIndex <- grep("heart attack", outcome[,c(11,17,23)], ignore.case=T)
grep("heart attack","heart attack")
grep("heart attack","heart attak")
grep("heart attack","heart attack")
foo <- grep("heart attack", outcome[,11])
outcomeIndex <- grepl("heart attack", outcome[,c(11,17,23)], ignore.case=T)
outcome[,11]
View(outcome)
names(outcome[11])
grep("heart attck",names(outcome[11]),ignore.case=T)
grep("heart attack",names(outcome[11]),ignore.case=T)
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
outcomeIndex <- data[,23]
stateIndex<- grep("AL", outcome[,7])
hosp <- data[c(stateIndex),c(outcomeIndex)]
hosp <- data[stateIndex,outcomeIndex]
outcomeIndex <- as.numeric(data[,11])
hosp <- data[stateIndex,outcomeIndex]
foo <- complete.cases(outcomeIndex)
foo <- sum(foo)
poo <- complete.cases(stateIndex)
poo
?as.numeric
outcomeIndex <- as.numeric(data[,11],na.rm=TRUE)
outcomeIndex <- complete.cases(outcomeIndex)
outcomeIndex <- as.numeric(data[,11])
outcomeIndex[complete.cases(outcomeIndex)]
rm(outcomeIndex)
outcomeIndex <- as.numeric(data[,11])
View(outcome)
hosp <- data[outcomeIndex[stateIndex,]]
hosp <- outcomeIndex[stateIndex,]
dim(outcomeIndex)
hosp <- outcomeIndex[,stateIndex]
hosp <- outcomeIndex[1,stateIndex]
hosp <- outcomeIndex[stateIndex,1]
outcomeIndex(22)
outcomeIndex[22]
hosp <- outcomeIndex[stateIndex]
?which.min
lowest <- which.min(rates)
rates <- outcomeIndex[stateIndex]
lowest <- which.min(rates)
View(rates)
?min
lowest <- min(rates, na.rm=T)
x <- c(1,1,1,2,3,4,4,5,6)
which.min(x0)
which.min(x)
x <- matrix(sample(1:100,20),nrow=10)
x[order(x[,2])[1],1]
?order
?diff
x
lowest <- which(rates == max(rates))
min(rates)
?min
lowest <- which(rates == min(rates, na.rm = T))
stateIndex<- grep("OR", outcome[,7])
rates <- outcomeIndex[stateIndex]
hosp <- data[stateIndex,2]
View(hosp)
lowest
?return
?display
?print
?return
?sort
x <- letters(10)
x <- sample(10)
x <- sample(letters(10))
?letters
x <- sample(c(1:10, letters)
)
x <- sample(c(1:10, letters))
x
?sample
x <- sample(10, letters)
x <- paste(letters)
x
?paste
bestHosp <- sort(hosp(lowest))
hosp <- data[stateIndex,2] # all hospitals in state
lowest <- which(rates == min(rates, na.rm = T))
if length(lowest ==1) {
bestHosp <- hosp(lowest)
bestHosp
} else {
bestHosp <- sort(hosp(lowest))
}
if length(lowest ==1) {
bestHosp <- hosp[lowest]
bestHosp
} else {
bestHosp <- sort(hosp[lowest])
}
if length(lowest ==1) {
bestHosp <- hosp[lowest]
bestHosp
}
if length(lowest) == 1 {
bestHosp <- hosp[lowest]
bestHosp
}
if(length(lowest) == 1) {
bestHosp <- hosp[lowest]
bestHosp
}
foo <- sort(hosp)
foo
?sort
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
View(data)
state <- "TX"
stateIndex <- grep(state, data[,7])
rm(state)
best("TX", "heart failure")
source('~/datasciencecoursera/best.R')
?grep
data[,7]
best(TX, "heart failure")
best("TX", "heart failure")
best("CA", "heart failure")
grep(state, data[,7])
grep("state"TX"", data[,7])
grep("TX", data[,7])
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
stateIndex <- grep(state, data[,7])
grep("outcome"foo, "heart attack")
grep("foo", "heart attack")
grep("heart attack", "heart attack")
grep("heart atack", "heart attack")
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
stateIndex <- grep("TX", data[,7])
stateIndex <- grep("TX", data[,7])
data <- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
stateIndex <- grep("TX", data[,7])
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
state = "TX"
stateIndex <- grep(state, data[,7])
length(stateIndex)
state = "CL"
stateIndex <- grep(state, data[,7])
length(stateIndex)
if(length(stateIndex == 0)) {
stop('invalid state')
}
if(length(stateIndex == 0)){
stop('invalid state')
}
source('~/datasciencecoursera/best.R')
rm(data,state,stateIndex)
best("TX", "heart failure")
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
grep("heart atack", "heart attack")
grep("heart attack", "heart attack")
length(grep("heart attack", "heart attack"))
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
source('~/datasciencecoursera/best.R')
best("TX", "heart failure")
best("TX", "heart attack")
best("MD", heart attack)
best("MD", "heart attack")
best("MD", "pneumonia")
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
data <- read.csv("outcome-of-care-measures.csv",                    colClasses = "character")
setwd('~/datasciencecoursera/')  data <- read.csv("outcome-of-care-measures.csv",                    colClasses = "character")
data <- read.csv("outcome-of-care-measures.csv",                    colClasses = "character")
data <- read.csv("outcome-of-care-measures.csv",                   colClasses = "character")
setwd('~/datasciencecoursera/')
data <- read.csv("outcome-of-care-measures.csv",                   colClasses = "character")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
colClasses = "character")
rm(best)
state = "TX"
stateIndex <- grep(state, data[,7])
outcome <- "heart attack"
if(length(grep(outcome, "heart attack")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,11]))  }  if(length(grep(outcome, "heart failure")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,17]))  }  if(length(grep(outcome, "pneumonia")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,23]))  }
length(grep(outcome, "heart attack"))
if(length(grep(outcome, "heart attack")) == 1) {    outcomeIndex <- suppressWarnings(as.numeric(data[,11]))  }
outcomeIndex <- suppressWarnings(as.numeric(data[,11]))
length(grep(outcome, "heart attack"))
rates <- outcomeIndex[stateIndex] # all mortality rates in state  hosp <- data[stateIndex,2] # all hospitals in state
hosp
rates <- outcomeIndex[stateIndex]
rates <- outcomeIndex[stateIndex]
hosp <- data[stateIndex,2]
view(rates)
View(rates)
?order
sort(rates,hosp)
sort(c(rates,hosp))
order(rates,hosp)
foo <- order(rates,hosp)
x <- rates(foo)
x <- rates[foo]
y <- hosp[foo]
z <- data.frame(x,y)
View(z)
head(texas)
?complete.cases
rankings <- data.frame(rates[foo], hosp[foo])
View(rankings)
rankings <- complete.cases(rankings)
rankings <- data.frame(rates[foo], hosp[foo])
rankings[complete.cases(rankings)]
rankings[complete.cases(rankings),]
View(rankings)
rankings[,complete.cases(rankings)]
complete.cases(rankings)
rankings[complete.cases(rankings),]
rm(rankings)
rankings <- rankings[complete.cases(data.frame(rates[foo], hosp[foo]),]
rankings <- complete.cases(data.frame(rates[foo], hosp[foo]))
rankings <- data.frame(rates[foo], hosp[foo])
alldat <- data.frame(rates[foo], hosp[foo])
rankings <- alldat[complete.cases(alldat),]
View(rankings)
View(rankings)
length(rankings)
size(rankings)
View(rankings)
dim(rankings)
dim(rankings,1)
?dim
dim(rankings)[1]
numhosp <- c(1:numhosp)
numhosp <- dim(rankings)[1]
numhosp <- c(1:numhosp)
rankings <- c(numhosp,rankings)
rankings <- alldat[complete.cases(alldat),]
?data.frame
rankings <- data.frame[numhosp,rankings]
rankings["rank"] <- numhosp
View(rankings)
?colnames
View(foo)
colnames(rankings) <- c("Rate","HospitalName","Rank")
c("Rate","HospitalName","Rank")
rm(foo, alldat, rankings, numhosp)
rm(x,y,z)
foo <- order(rates,hosp)
View(foo)
alldat <- data.frame(hosp[foo], rates[foo)
alldat <- data.frame(hosp[foo], rates[foo])
rankings <- alldat[complete.cases(alldat),]
numhosp <- dim(rankings)[1]  numhosp <- c(1:numhosp)  rankings["rank"] <- numhosp
numhosp <- dim(rankings)[1]
numhosp <- c(1:numhosp)
rankings["rank"] <- numhosp
colnames(rankings) <- c("HospitalName","Rate","Rank")
?data.frame
alldat <- data.frame(hosp[foo], rates[foo],                        row.names = c("HospitalName","Rate"))
c("HospitalName","Rate")
alldat <- data.frame(hosp[foo], rates[foo],                        row.names = c("HospitalName","Rate"))
View(rankings)
View(rankings)
bestHosp <- rankings$HospitalName[1]
rankings$HospitalName[1]
rankings$HospitalName
rankings$HospitalName[1,]
rankings$HospitalName[1,1]
rankings$HospitalName[1]
bestHosp <-rankings$HospitalName[numhosp]
bestHosp
dim(rankings)[1]
bestHosp <- bestHosp[dim(rankings)[1]] # take hosp with  earliest alpha as winner
bestHosp
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/best.R')
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankhospital.R')
source('~/datasciencecoursera/rankhospital.R')
if(num == "best") {    bestHosp <- rankings$HospitalName[1]  }
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
rankhospital("TX","heart failure", 4)
rankhospital
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
source('~/datasciencecoursera/rankhospital.R')
rankhospital("TX","heart failure", 4)
rankings$hospitalName[4]
num <- "best"
num=="best"
if(num == "best")
{stop('NA')}
rankhospital("TX","heart failure", "best")
numhosp <- 29
numhosp(1:50)
numhosp<-c(1:50)
max(numhosp)
num <- 51
num > max(numhosp)
?display
?return
if(num > max(numhosp)) {    return('NA')  }
source('~/datasciencecoursera/rankhospital.R')
rm(num, numhosp)
rankhospital("TX","heart failure", 4)
